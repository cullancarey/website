name: 'Deploy'

on:
  push:
    branches:
      - develop
      - main

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  dev-terraform:
    name: 'Dev - Deploy Terraform'
    if: endsWith(github.ref, '/develop')
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Configure AWS Creds DEV
    - name: Configure AWS Credentials Dev
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::693590665244:role/GithubActionsUser
        role-session-name: GithubActionsDevPlanSession
        aws-region: us-east-2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.$GITHUB_REF_NAME.conf
      continue-on-error: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      run: terraform apply --auto-approve -input=false -var-file="$GITHUB_REF_NAME.tfvars"


  dev-deploy-files-to-S3:
    name: 'Dev - Deploy files to S3'
    if: endsWith(github.ref, '/develop')
    needs: dev-terraform
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://cullan.click
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials Dev
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::693590665244:role/GithubActionsUser
        role-session-name: GithubActionsDevPlanSession
        aws-region: us-east-2

    - name: Deploy static site to S3 bucket Dev
      run: aws s3 sync ./src/$GITHUB_REF_NAME/ s3://cullan.click --delete --size-only

    - name: Invalidate Cloudfront Cache Dev
      run: aws cloudfront create-invalidation --distribution-id E15AY619D905H7 --paths '/*'


  prod-terraform:
    name: 'Prod - Deploy Terraform'
    if: endsWith(github.ref, '/main')
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Configure AWS Creds DEV
    - name: Configure AWS Credentials Prod
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::045107234435:role/GithubActionsUser
        role-session-name: GithubActionsProdPlanSession
        aws-region: us-east-2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.$GITHUB_REF_NAME.conf
      continue-on-error: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      run: terraform apply --auto-approve -input=false -var-file="$GITHUB_REF_NAME.tfvars"


  prod-deploy-files-to-S3:
    name: 'Prod - Deploy files to S3'
    if: endsWith(github.ref, '/main')
    needs: prod-terraform
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://cullancarey.com
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials Prod
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::045107234435:role/GithubActionsUser
        role-session-name: GithubActionsProdPlanSession
        aws-region: us-east-2

    - name: Deploy static site to S3 bucket Prod
      run: aws s3 sync ./src/$GITHUB_REF_NAME/ s3://cullancarey.com --delete --size-only

    - name: Invalidate Cloudfront Cache Prod
      run: aws cloudfront create-invalidation --distribution-id E1EM2WQ96D3J54 --paths '/*'
